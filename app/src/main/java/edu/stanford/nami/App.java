/*
 * This source file was generated by the Gradle 'init' task
 */
package edu.stanford.nami;

import com.google.common.base.Charsets;
import com.google.common.io.Files;
import com.google.common.primitives.Longs;
import com.google.gson.Gson;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import nami.stanford.edu.ServerConfig;
import org.rocksdb.Options;
import org.rocksdb.RocksDB;
import org.rocksdb.RocksDBException;

public class App {
  public String getGreeting() {
    return "Hello World!";
  }

  public static void main(String[] args) {
    var config = loadServerConfig(args);
    System.out.println(Path.of(".", "hello").toAbsolutePath());
    RocksDB.loadLibrary();
    try (final Options options = new Options().setCreateIfMissing(true)) {
      try (final RocksDB db = RocksDB.open(options, "/home/jtamayo/src/dbs/test1")) {
        // do something

        var key = "hello".getBytes();
        final byte[] value = db.get(key);
        if (value == null) { // value == null if key1 does not exist in db.
          System.out.println("Storing " + config.getStartValue());
          db.put(key, Longs.toByteArray(config.getStartValue()));
        } else {
          var next = Longs.fromByteArray(value) + 1;
          System.out.println("Incrementing to " + next);
          db.put(key, Longs.toByteArray(next));
        }
      }
    } catch (RocksDBException e) {
      // do some error handling
      throw new RuntimeException(e);
    }
  }

  private static ServerConfig loadServerConfig(String[] args) {
    if (args.length != 1) {
      System.err.println("Invalid usage. Usage: nami <config_file>");
      System.exit(-1);
    }
    var fileName = args[0];
    var file = new File(fileName);

    if (!file.exists()) {
      System.err.println("File " + file.getAbsolutePath() + " does not exist");
      System.exit(-2);
    }

    Gson gson = new Gson();

    try (var reader = Files.newReader(file, Charsets.UTF_8)) {
      return gson.fromJson(reader, ServerConfig.class);

    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
}
