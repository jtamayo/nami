/*
 * This source file was generated by the Gradle 'init' task
 */
package edu.stanford.nami;

import com.google.common.base.Charsets;
import com.google.common.io.Files;
import com.google.common.primitives.Longs;
import com.google.gson.Gson;

import edu.stanford.nami.config.ChunksConfig;
import edu.stanford.nami.config.PeersConfig;
import edu.stanford.nami.config.ServerConfig;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import org.rocksdb.Options;
import org.rocksdb.RocksDB;
import org.rocksdb.RocksDBException;

public class App {

  public String getGreeting() {
    return "Hello World!";
  }

  public static void main(String[] args) {
    System.out.println("Running in " + (new File(".").getAbsolutePath()));
    var config = loadServerConfig(args);
    System.out.println(config);
    var serverAllocation = loadPeersConfig(config.getPeerConfigsPath());
    System.out.println(serverAllocation);
    var chunksConfig = loadChunksConfig(config.getChunkConfigPath());
    System.out.println(chunksConfig);
  }

  private static ServerConfig loadServerConfig(String[] args) {
    if (args.length != 1) {
      System.err.println("Invalid usage. Usage: nami <config_file>");
      System.exit(-1);
    }
    var fileName = args[0];
    var file = new File(fileName);

    if (!file.exists()) {
      System.err.println("File " + file.getAbsolutePath() + " does not exist");
      System.exit(-2);
    }


    try (var reader = Files.newReader(file, Charsets.UTF_8)) {
      return new Gson().fromJson(reader, ServerConfig.class);

    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  public static PeersConfig loadPeersConfig(String path) {
    var file = new File(path);
    try (var reader = Files.newReader(file, Charsets.UTF_8)) {
      return new Gson().fromJson(reader, PeersConfig.class);

    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  public static ChunksConfig loadChunksConfig(String path) {
    var file = new File(path);
    try (var reader = Files.newReader(file, Charsets.UTF_8)) {
      return new Gson().fromJson(reader, ChunksConfig.class);

    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
}
